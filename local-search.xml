<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>paddle-1-2</title>
    <link href="/2021/01/27/paddle-1-2/"/>
    <url>/2021/01/27/paddle-1-2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用-Python-语言和-Numpy-库来构建神经网络模型"><a href="#使用-Python-语言和-Numpy-库来构建神经网络模型" class="headerlink" title="使用 Python 语言和 Numpy 库来构建神经网络模型"></a>使用 Python 语言和 Numpy 库来构建神经网络模型</h1><h2 id="波士顿房价预测任务"><a href="#波士顿房价预测任务" class="headerlink" title="波士顿房价预测任务"></a>波士顿房价预测任务</h2><p>对于预测问题，可以根据预测输出的类型是连续的实数值，还是离散的标签，区分为回归任务和分类任务。因为房价是一个连续值，所以房价预测显然是一个回归任务。</p><h3 id="线性回归模型"><a href="#线性回归模型" class="headerlink" title="线性回归模型"></a>线性回归模型</h3><p>假设房价和各影响因素之间能够用线性关系来描述：</p><p>y=∑j=1Mxjwj+by = {\sum_{j=1}^Mx_j w_j} + b<em>y</em>=<em>j</em>=1∑<em>M<strong>x</strong>j<strong>w</strong>j</em>+<em>b</em></p><p>模型的求解即是通过数据拟合出每个wjw_j<em>w**j</em>和bb<em>b</em>。其中，wjw_j<em>w**j</em>和bb<em>b</em> 分别表示该线性模型的权重和偏置。一维情况下，wjw_j<em>w**j</em> 和 bb<em>b</em> 是直线的斜率和截距。</p><p>线性回归模型使用均方误差作为损失函数（Loss），用以衡量预测房价和真实房价的差异，公式如下：</p><p>MSE=1n∑i=1n(Yi^−Yi)2MSE = \frac{1}{n} \sum_{i=1}^n(\hat{Y_i} - {Y_i})^{2}<em>M<strong>S</strong>E</em>=<em>n</em>1<em>i</em>=1∑<em>n</em>(<em>Y**i</em>^−<em>Y**i</em>)2</p><h3 id="线性回归模型的神经网络结构"><a href="#线性回归模型的神经网络结构" class="headerlink" title="线性回归模型的神经网络结构"></a>线性回归模型的神经网络结构</h3><p>神经网络的标准结构中每个神经元由加权和与非线性变换构成，然后将多个神经元分层的摆放并连接形成神经网络。线性回归模型可以认为是神经网络模型的一种极简特例，是一个只有加权和、没有非线性变换的神经元（无需形成网络）。</p><h2 id="构建波士顿房价预测任务的神经网络模型"><a href="#构建波士顿房价预测任务的神经网络模型" class="headerlink" title="构建波士顿房价预测任务的神经网络模型"></a>构建波士顿房价预测任务的神经网络模型</h2><p>不同场景的深度学习模型具备一定的通用性，五个步骤即可完成模型的构建和训练：</p><ol><li>数据处理：从本地或URL读取数据，并完成预处理操作（如数据校验、格式转化等），保证模型可读取。</li><li>模型设计：网络结构设计，相当于模型的假设空间，即模型能够表达的关系集合。</li><li>训练配置：设定模型采用的寻解算法，即优化器，并指定计算资源。</li><li>训练过程：循环调用训练过程，每轮都包括前向计算、损失函数（优化目标）和后向传播三个步骤。</li><li>模型保存：将训练好的模型保存，模型预测时调用</li></ol><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>数据处理包括五个部分：数据导入、数据形状变化、数据集分割、数据归一化和封装<code>load_data</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_data</span>():</span><br>    <span class="hljs-comment"># 从文件导入数据</span><br>    datafile = <span class="hljs-string">&#x27;./work/housing.data&#x27;</span><br>    data = np.fromfile(datafile, sep=<span class="hljs-string">&#x27; &#x27;</span>)<br><br>    <span class="hljs-comment"># 每条数据包括14项，其中前面13项是影响因素，第14项是相应的房屋价格中位数</span><br>    feature_names = [ <span class="hljs-string">&#x27;CRIM&#x27;</span>, <span class="hljs-string">&#x27;ZN&#x27;</span>, <span class="hljs-string">&#x27;INDUS&#x27;</span>, <span class="hljs-string">&#x27;CHAS&#x27;</span>, <span class="hljs-string">&#x27;NOX&#x27;</span>, <span class="hljs-string">&#x27;RM&#x27;</span>, <span class="hljs-string">&#x27;AGE&#x27;</span>, \<br>                      <span class="hljs-string">&#x27;DIS&#x27;</span>, <span class="hljs-string">&#x27;RAD&#x27;</span>, <span class="hljs-string">&#x27;TAX&#x27;</span>, <span class="hljs-string">&#x27;PTRATIO&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;LSTAT&#x27;</span>, <span class="hljs-string">&#x27;MEDV&#x27;</span> ]<br>    feature_num = <span class="hljs-built_in">len</span>(feature_names)<br><br>    <span class="hljs-comment"># 将原始数据进行Reshape，变成[N, 14]这样的形状</span><br>    data = data.reshape([data.shape[<span class="hljs-number">0</span>] // feature_num, feature_num])<br><br>    <span class="hljs-comment"># 将原数据集拆分成训练集和测试集</span><br>    <span class="hljs-comment"># 这里使用80%的数据做训练，20%的数据做测试</span><br>    <span class="hljs-comment"># 测试集和训练集必须是没有交集的</span><br>    ratio = <span class="hljs-number">0.8</span><br>    offset = <span class="hljs-built_in">int</span>(data.shape[<span class="hljs-number">0</span>] * ratio)<br>    training_data = data[:offset]<br><br>    <span class="hljs-comment"># 计算训练集的最大值，最小值，平均值</span><br>    maximums, minimums, avgs = training_data.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">0</span>), training_data.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">0</span>), \<br>                                 training_data.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>) / training_data.shape[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># 对数据进行归一化处理</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(feature_num):<br>        <span class="hljs-comment">#print(maximums[i], minimums[i], avgs[i])</span><br>        data[:, i] = (data[:, i] - minimums[i]) / (maximums[i] - minimums[i])<br><br>    <span class="hljs-comment"># 训练集和测试集的划分比例</span><br>    training_data = data[:offset]<br>    test_data = data[offset:]<br>    <span class="hljs-keyword">return</span> training_data, test_data<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取数据</span><br>training_data, test_data = load_data()<br>x = training_data[:, :-<span class="hljs-number">1</span>]<br>y = training_data[:, -<span class="hljs-number">1</span>:]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看数据</span><br>print(x[<span class="hljs-number">0</span>])<br>print(y[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h3 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h3><p>模型设计是深度学习模型关键要素之一，也称为网络结构设计，相当于模型的假设空间，即实现模型 “前向计算”（从输入到输出）的过程。</p><h3 id="训练配置"><a href="#训练配置" class="headerlink" title="训练配置"></a>训练配置</h3><p>模型设计完成后，需要通过训练配置寻找模型的最优值，即通过损失函数来衡量模型的好坏。训练配置也是深度学习模型关键要素之一。</p><p>通过模型计算$x_1$表示的影响因素所对应的房价应该是$z$, 但实际数据告诉我们房价是$y$。这时我们需要有某种指标来衡量预测值$z$跟真实值$y$之间的差距。对于回归问题，最常采用的衡量方法是使用均方误差作为评价模型好坏的指标，具体定义如下：</p><p>$$Loss = (y - z)^2$$</p><p>上式中的$Loss$（简记为: $L$）通常也被称作损失函数，它是衡量模型好坏的指标。在回归问题中，均方误差是一种比较常见的形式，分类问题中通常会采用交叉熵作为损失函数。</p><p>因为计算损失函数时需要把每个样本的损失函数值都考虑到，所以我们需要对单个样本的损失函数进行求和，并除以样本总数$N$。<br>$$Loss= \frac{1}{N}\sum_{i=1}^N{(y_i - z_i)^2}$$</p><h3 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h3><p>上述计算过程描述了如何构建神经网络，通过神经网络完成预测值和损失函数的计算。接下来介绍如何求解参数$w$和$b$的数值，这个过程也称为模型训练过程。训练过程是深度学习模型的关键要素之一，其目标是让定义的损失函数$Loss$尽可能的小，也就是说找到一个参数解$w$和$b$，使得损失函数取得极小值。</p><p>总代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Network</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):</span><br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，此处设置固定的随机数种子</span><br>        <span class="hljs-comment">#np.random.seed(0)</span><br>        self.w = np.random.randn(num_of_weights, <span class="hljs-number">1</span>)<br>        self.b = <span class="hljs-number">0.</span><br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loss</span>(<span class="hljs-params">self, z, y</span>):</span><br>        error = z - y<br>        num_samples = error.shape[<span class="hljs-number">0</span>]<br>        cost = error * error<br>        cost = np.<span class="hljs-built_in">sum</span>(cost) / num_samples<br>        <span class="hljs-keyword">return</span> cost<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gradient</span>(<span class="hljs-params">self, x, y</span>):</span><br>        z = self.forward(x)<br>        N = x.shape[<span class="hljs-number">0</span>]<br>        gradient_w = <span class="hljs-number">1.</span> / N * np.<span class="hljs-built_in">sum</span>((z-y) * x, axis=<span class="hljs-number">0</span>)<br>        gradient_w = gradient_w[:, np.newaxis]<br>        gradient_b = <span class="hljs-number">1.</span> / N * np.<span class="hljs-built_in">sum</span>(z-y)<br>        <span class="hljs-keyword">return</span> gradient_w, gradient_b<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self, gradient_w, gradient_b, eta = <span class="hljs-number">0.01</span></span>):</span><br>        self.w = self.w - eta * gradient_w<br>        self.b = self.b - eta * gradient_b<br>            <br>                <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train</span>(<span class="hljs-params">self, training_data, num_epochs, batch_size=<span class="hljs-number">10</span>, eta=<span class="hljs-number">0.01</span></span>):</span><br>        n = <span class="hljs-built_in">len</span>(training_data)<br>        losses = []<br>        <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>            <span class="hljs-comment"># 在每轮迭代开始之前，将训练数据的顺序随机打乱</span><br>            <span class="hljs-comment"># 然后再按每次取batch_size条数据的方式取出</span><br>            np.random.shuffle(training_data)<br>            <span class="hljs-comment"># 将训练数据进行拆分，每个mini_batch包含batch_size条的数据</span><br>            mini_batches = [training_data[k:k+batch_size] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n, batch_size)]<br>            <span class="hljs-keyword">for</span> iter_id, mini_batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(mini_batches):<br>                <span class="hljs-comment">#print(self.w.shape)</span><br>                <span class="hljs-comment">#print(self.b)</span><br>                x = mini_batch[:, :-<span class="hljs-number">1</span>]<br>                y = mini_batch[:, -<span class="hljs-number">1</span>:]<br>                a = self.forward(x)<br>                loss = self.loss(a, y)<br>                gradient_w, gradient_b = self.gradient(x, y)<br>                self.update(gradient_w, gradient_b, eta)<br>                losses.append(loss)<br>                print(<span class="hljs-string">&#x27;Epoch &#123;:3d&#125; / iter &#123;:3d&#125;, loss = &#123;:.4f&#125;&#x27;</span>.<br>                                 <span class="hljs-built_in">format</span>(epoch_id, iter_id, loss))<br>        <br>        <span class="hljs-keyword">return</span> losses<br><br><span class="hljs-comment"># 获取数据</span><br>train_data, test_data = load_data()<br><br><span class="hljs-comment"># 创建网络</span><br>net = Network(<span class="hljs-number">13</span>)<br><span class="hljs-comment"># 启动训练</span><br>losses = net.train(train_data, num_epochs=<span class="hljs-number">50</span>, batch_size=<span class="hljs-number">100</span>, eta=<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment"># 画出损失函数的变化趋势</span><br>plot_x = np.arange(<span class="hljs-built_in">len</span>(losses))<br>plot_y = np.array(losses)<br>plt.plot(plot_x, plot_y)<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Paddle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Paddle AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paddle-1-1</title>
    <link href="/2021/01/27/paddle-1-1/"/>
    <url>/2021/01/27/paddle-1-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="机器学习与深度学习综述"><a href="#机器学习与深度学习综述" class="headerlink" title="机器学习与深度学习综述"></a>机器学习与深度学习综述</h1><h1 id="人工智能-gt-机器学习-gt-深度学习"><a href="#人工智能-gt-机器学习-gt-深度学习" class="headerlink" title="人工智能&gt;机器学习&gt;深度学习"></a>人工智能&gt;机器学习&gt;深度学习</h1><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="机器学习的实现"><a href="#机器学习的实现" class="headerlink" title="机器学习的实现"></a>机器学习的实现</h2><p>机器学习的实现可以分为两步：训练和预测：</p><ul><li><p>训练：从一定数量的样本（已知模型输入X 和模型输出Y）中，学习输出Y与输入X 的关系（可以想象成是某种表达式）。</p></li><li><p>预测：基于训练得到的Y与X之间的关系，如出现新的输入X，计算出输出Y。通常情况下，如果通过模型计算的输出和真实场景的输出一致，则说明模型是有效的。</p></li></ul><h2 id="机器学习的方法论"><a href="#机器学习的方法论" class="headerlink" title="机器学习的方法论"></a>机器学习的方法论</h2><ul><li><strong>模型有效的基本条件是能够拟合已知的样本</strong></li><li>以H 为模型的假设，它是一个关于参数W 和输入X的函数，用H(W,X) 表示。模型的优化目标是H(W,X) 的输出与真实输出Y 尽量一致，两者的相差程度即是模型效果的评价函数（相差越小越好）。那么，确定参数的过程就是在已知的样本上，不断减小该评价函数（H(W,X)和Y相差）的过程，直到学习到一个参数W，使得评价函数的取值最小。这个 <strong>衡量模型预测值和真实值差距的评价函数也被称为损失函数（损失 Loss）</strong>。</li><li><strong>模型假设、评价函数（损失 / 优化目标）和优化算法是构成模型的三个部分</strong>。</li><li>机器执行学习的框架体现了其<strong>学习的本质是 “参数估计”</strong>（Learning is parameter estimation）。</li></ul><h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><p>相比传统的机器学习算法，深度学习做出了哪些改进呢？其实<strong>两者在理论结构上是一致的，即：模型假设、评价函数和优化算法，其根本差别在于假设的复杂度</strong> </p><h2 id="神经网络的基本概念"><a href="#神经网络的基本概念" class="headerlink" title="神经网络的基本概念"></a>神经网络的基本概念</h2><p>人工神经网络包括多个神经网络层，如卷积层、全连接层、LSTM 等，每一层又包括很多神经元，超过三层的非线性神经网络都可以被称为深度神经网络。通俗的讲，<strong>深度学习的模型可以视为是输入到输出的映射函数</strong>，如图像到高级语义（美女）的映射，<strong>足够深的神经网络理论上可以拟合任何复杂的函数</strong>。因此神经网络非常适合学习样本数据的内在规律和表示层次，对文字、图像和语音任务有很好的适用性。</p><p>神经网络的结构：</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/af79017f3e1143fab258386460c324c4adf7ab0a51364fa98474d04798721752"></p><ul><li>神经元：神经网络中每个节点称为神经元，由两部分组成：<ul><li>加权和：将所有输入加权求和。</li><li>非线性变换（激活函数）：加权和的结果经过一个非线性函数变换，让神经元计算具备非线性的能力。</li></ul></li><li>多层连接：大量节点按照不同的层次排布，形成多层的结构连接起来，即称为神经网络。</li><li>前向计算：从输入计算输出的过程，顺序从网络前至后。</li><li>计算图：以图形化的方式展现神经网络的计算逻辑又称为计算图。我们也可以将神经网络的计算图以公式的方式表达，如下：</li></ul><p>Y=f3(f2(f1(w1⋅x1+w2⋅x2+w3⋅x3+b)+…)…)…)Y =f_3 ( f_2 ( f_1 ( w_1\cdot x_1+w_2\cdot x_2+w_3\cdot x_3+b ) + … ) … ) … )<em>Y</em>=<em>f</em>3(<em>f</em>2(<em>f</em>1(<em>w</em>1⋅<em>x</em>1+<em>w</em>2⋅<em>x</em>2+<em>w</em>3⋅<em>x</em>3+<em>b</em>)+…)…)…)</p><p>神经网络并没有那么神秘，它的本质是一个含有很多参数的 “大公式”。</p>]]></content>
    
    
    <categories>
      
      <category>Paddle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Paddle AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>paddle深度学习与图像处理</title>
    <link href="/2021/01/22/paddle-1/"/>
    <url>/2021/01/22/paddle-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="深度学习与图像处理"><a href="#深度学习与图像处理" class="headerlink" title="深度学习与图像处理"></a>深度学习与图像处理</h1><h2 id="什么是深度学习？"><a href="#什么是深度学习？" class="headerlink" title="什么是深度学习？"></a>什么是深度学习？</h2><p>深度学习是一种机器学习模型，“建立模仿人大脑的模型”，就是使用神经网络这种函数解决机器学习问题，因为网路的层数多所以“深度”。</p><h2 id="如何使用深度学习解决图像识别？"><a href="#如何使用深度学习解决图像识别？" class="headerlink" title="如何使用深度学习解决图像识别？"></a>如何使用深度学习解决图像识别？</h2><ul><li>使用机器学习（深度学习）的目的： 寻找一个合适的函数</li></ul><h2 id="深度学习三部曲"><a href="#深度学习三部曲" class="headerlink" title="深度学习三部曲"></a>深度学习三部曲</h2><ul><li><p><strong>建立模型</strong>：</p><p>1.选择什么样的网络结构</p><p>2.选择多少层数，每层选择多少神经元</p></li><li><p><strong>损失函数</strong>：</p><p>1.选择常用损失函数：平方误差、交叉熵······</p></li><li><p><strong>参数学习</strong>：</p><p>1.梯度下降</p><p>2.反向传播算法</p></li></ul><h2 id="实践：手势识别"><a href="#实践：手势识别" class="headerlink" title="实践：手势识别"></a>实践：手势识别</h2><p>使用PaddlePaddle和深度神经网络（DNN）来完成手势识别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding: utf-8</span><br><br><span class="hljs-comment"># In[ ]:</span><br><br><br><span class="hljs-comment"># 查看当前挂载的数据集目录, 该目录下的变更重启环境后会自动还原</span><br><span class="hljs-comment"># View dataset directory. This directory will be recovered automatically after resetting environment. </span><br>get_ipython().system(<span class="hljs-string">&#x27;ls /home/aistudio/data&#x27;</span>)<br><br><br><span class="hljs-comment"># In[ ]:</span><br><br><br><span class="hljs-comment"># 查看工作区文件, 该目录下的变更将会持久保存. 请及时清理不必要的文件, 避免加载过慢.</span><br><span class="hljs-comment"># View personal work directory. All changes under this directory will be kept even after reset. Please clean unnecessary files in time to speed up environment loading.</span><br>get_ipython().system(<span class="hljs-string">&#x27;ls /home/aistudio/work&#x27;</span>)<br><br><br><span class="hljs-comment"># In[ ]:</span><br><br><br>get_ipython().system(<span class="hljs-string">&#x27;cd /home/aistudio/data/data23668 &amp;&amp; unzip -qo Dataset.zip&#x27;</span>)<br>get_ipython().system(<span class="hljs-string">&#x27;cd /home/aistudio/data/data23668/Dataset &amp;&amp; rm -f */.DS_Store # 删除无关文件 &#x27;</span>)<br><br><br><span class="hljs-comment"># In[ ]:</span><br><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">import</span> paddle.fluid <span class="hljs-keyword">as</span> fluid<br><span class="hljs-keyword">import</span> paddle.fluid.layers <span class="hljs-keyword">as</span> layers<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> cpu_count<br><span class="hljs-keyword">from</span> paddle.fluid.dygraph <span class="hljs-keyword">import</span> Pool2D,Conv2D<br><span class="hljs-keyword">from</span> paddle.fluid.dygraph <span class="hljs-keyword">import</span> Linear<br><br><br><span class="hljs-comment"># In[ ]:</span><br><br><br><span class="hljs-comment"># 生成图像列表</span><br>data_path = <span class="hljs-string">&#x27;/home/aistudio/data/data23668/Dataset&#x27;</span><br>character_folders = os.listdir(data_path)<br><span class="hljs-comment"># print(character_folders)</span><br><span class="hljs-keyword">if</span>(os.path.exists(<span class="hljs-string">&#x27;./train_data.list&#x27;</span>)):<br>    os.remove(<span class="hljs-string">&#x27;./train_data.list&#x27;</span>)<br><span class="hljs-keyword">if</span>(os.path.exists(<span class="hljs-string">&#x27;./test_data.list&#x27;</span>)):<br>    os.remove(<span class="hljs-string">&#x27;./test_data.list&#x27;</span>)<br>    <br><span class="hljs-keyword">for</span> character_folder <span class="hljs-keyword">in</span> character_folders:<br>    <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./train_data.list&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f_train:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./test_data.list&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f_test:<br>            <span class="hljs-keyword">if</span> character_folder == <span class="hljs-string">&#x27;.DS_Store&#x27;</span>:<br>                <span class="hljs-keyword">continue</span><br>            character_imgs = os.listdir(os.path.join(data_path,character_folder))<br>            count = <span class="hljs-number">0</span> <br>            <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> character_imgs:<br>                <span class="hljs-keyword">if</span> img ==<span class="hljs-string">&#x27;.DS_Store&#x27;</span>:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> count%<span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>                    f_test.write(os.path.join(data_path,character_folder,img) + <span class="hljs-string">&#x27;\t&#x27;</span> + character_folder + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    f_train.write(os.path.join(data_path,character_folder,img) + <span class="hljs-string">&#x27;\t&#x27;</span> + character_folder + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                count +=<span class="hljs-number">1</span><br>print(<span class="hljs-string">&#x27;列表已生成&#x27;</span>)<br><br><br><span class="hljs-comment"># In[ ]:</span><br><br><br><span class="hljs-comment"># 定义训练集和测试集的reader</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">data_mapper</span>(<span class="hljs-params">sample</span>):</span><br>    img, label = sample<br>    img = Image.<span class="hljs-built_in">open</span>(img)<br>    img = img.resize((<span class="hljs-number">100</span>, <span class="hljs-number">100</span>), Image.ANTIALIAS)<br>    img = np.array(img).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>    img = img.transpose((<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>    img = img/<span class="hljs-number">255.0</span><br>    <span class="hljs-keyword">return</span> img, label<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">data_reader</span>(<span class="hljs-params">data_list_path</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reader</span>():</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_list_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            lines = f.readlines()<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>                img, label = line.split(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>                <span class="hljs-keyword">yield</span> img, <span class="hljs-built_in">int</span>(label)<br>    <span class="hljs-keyword">return</span> paddle.reader.xmap_readers(data_mapper, reader, cpu_count(), <span class="hljs-number">512</span>)<br><br><br><span class="hljs-comment"># In[ ]:</span><br><br><br><span class="hljs-comment"># 用于训练的数据提供器</span><br>train_reader = paddle.batch(reader=paddle.reader.shuffle(reader=data_reader(<span class="hljs-string">&#x27;./train_data.list&#x27;</span>), buf_size=<span class="hljs-number">256</span>), batch_size=<span class="hljs-number">32</span>)<br><span class="hljs-comment"># 用于测试的数据提供器</span><br>test_reader = paddle.batch(reader=data_reader(<span class="hljs-string">&#x27;./test_data.list&#x27;</span>), batch_size=<span class="hljs-number">32</span>) <br><br><br><span class="hljs-comment"># In[ ]:</span><br><br><br><span class="hljs-comment"># 定义DNN网络</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDNN</span>(<span class="hljs-params">fluid.dygraph.Layer</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">super</span>(MyDNN, self).__init__()<br>        self.hidden1 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden2 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden3 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden4 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden5 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden6 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden7 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden8 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden9 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden10 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden11 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden12 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden13 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden14 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden15 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden16 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden17 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden18 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden19 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.hidden20 = Linear(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,act=<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        <span class="hljs-comment">#输出层</span><br>        self.hidden21 = Linear(<span class="hljs-number">3</span>*<span class="hljs-number">100</span>*<span class="hljs-number">100</span>,<span class="hljs-number">10</span>,act=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):</span><br>        x = self.hidden1(<span class="hljs-built_in">input</span>)<br>        x = self.hidden2(x)<br>        x = self.hidden3(x)<br>        x = self.hidden4(x)<br>        x = self.hidden5(x)<br>        x = self.hidden6(x)<br>        x = self.hidden7(x)<br>        x = self.hidden8(x)<br>        x = self.hidden9(x)<br>        x = self.hidden10(x)<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        x = self.hidden11(x)</span><br><span class="hljs-string">        x = self.hidden12(x)</span><br><span class="hljs-string">        x = self.hidden13(x)</span><br><span class="hljs-string">        x = self.hidden14(x)</span><br><span class="hljs-string">        x = self.hidden15(x)</span><br><span class="hljs-string">        x = self.hidden16(x)</span><br><span class="hljs-string">        x = self.hidden17(x)</span><br><span class="hljs-string">        x = self.hidden18(x)</span><br><span class="hljs-string">        x = self.hidden19(x)</span><br><span class="hljs-string">        x = self.hidden20(x)</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br><br>        x = fluid.layers.reshape(x, shape=[-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>*<span class="hljs-number">100</span>*<span class="hljs-number">100</span>])<br><br>        y = self.hidden21(x)<br><br>        <span class="hljs-keyword">return</span> y<br><br><br><span class="hljs-comment"># In[11]:</span><br><br><br><span class="hljs-comment">#用动态图进行训练</span><br><span class="hljs-keyword">with</span> fluid.dygraph.guard():<br>    model=MyDNN() <span class="hljs-comment">#模型实例化</span><br>    model.train() <span class="hljs-comment">#训练模式</span><br>    opt=fluid.optimizer.SGDOptimizer(learning_rate=<span class="hljs-number">0.001</span>, parameter_list=model.parameters())<span class="hljs-comment">#优化器选用SGD随机梯度下降，学习率为0.001.</span><br><br>    epochs_num=<span class="hljs-number">1000</span> <span class="hljs-comment">#迭代次数</span><br>     <br>    <span class="hljs-keyword">for</span> pass_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs_num):<br>        <br>        <span class="hljs-keyword">for</span> batch_id,data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_reader()):<br>            <br>            images=np.array([x[<span class="hljs-number">0</span>].reshape(<span class="hljs-number">3</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> data],np.float32)<br>            <br>            labels = np.array([x[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> data]).astype(<span class="hljs-string">&#x27;int64&#x27;</span>)<br>            labels = labels[:, np.newaxis]<br>            <span class="hljs-comment"># print(images.shape)</span><br>            image=fluid.dygraph.to_variable(images)<br>            label=fluid.dygraph.to_variable(labels)<br>            predict=model(image)<br>            <br>            loss=fluid.layers.cross_entropy(predict,label)<br>            avg_loss=fluid.layers.mean(loss)<span class="hljs-comment">#获取loss值</span><br>            <br>            acc=fluid.layers.accuracy(predict,label)<span class="hljs-comment">#计算精度</span><br>            <br>            <span class="hljs-keyword">if</span> batch_id!=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> batch_id%<span class="hljs-number">50</span>==<span class="hljs-number">0</span>:<br>                print(<span class="hljs-string">&quot;train_pass:&#123;&#125;,batch_id:&#123;&#125;,train_loss:&#123;&#125;,train_acc:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(pass_num,batch_id,avg_loss.numpy(),acc.numpy()))<br>            <br>            avg_loss.backward()<br>            opt.minimize(avg_loss)<br>            model.clear_gradients()<br>            <br>    fluid.save_dygraph(model.state_dict(),<span class="hljs-string">&#x27;MyDNN&#x27;</span>)<span class="hljs-comment">#保存模型</span><br><br><br><span class="hljs-comment"># In[14]:</span><br><br><br><span class="hljs-comment">#模型校验</span><br><span class="hljs-keyword">with</span> fluid.dygraph.guard():<br>    accs = []<br>    model_dict, _ = fluid.load_dygraph(<span class="hljs-string">&#x27;MyDNN&#x27;</span>)<br>    model = MyDNN()<br>    model.load_dict(model_dict) <span class="hljs-comment">#加载模型参数</span><br>    model.<span class="hljs-built_in">eval</span>() <span class="hljs-comment">#训练模式</span><br>    <span class="hljs-keyword">for</span> batch_id,data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(test_reader()):<span class="hljs-comment">#测试集</span><br>        images=np.array([x[<span class="hljs-number">0</span>].reshape(<span class="hljs-number">3</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> data],np.float32)<br>        labels = np.array([x[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> data]).astype(<span class="hljs-string">&#x27;int64&#x27;</span>)<br>        labels = labels[:, np.newaxis]<br><br>        image=fluid.dygraph.to_variable(images)<br>        label=fluid.dygraph.to_variable(labels)<br>        <br>        predict=model(image)       <br>        acc=fluid.layers.accuracy(predict,label)<br>        accs.append(acc.numpy()[<span class="hljs-number">0</span>])<br>        avg_acc = np.mean(accs)<br>    print(avg_acc)<br><br><br><span class="hljs-comment"># In[17]:</span><br><br><br><span class="hljs-comment">#读取预测图像，进行预测</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_image</span>(<span class="hljs-params">path</span>):</span><br>    img = Image.<span class="hljs-built_in">open</span>(path)<br>    img = img.resize((<span class="hljs-number">100</span>, <span class="hljs-number">100</span>), Image.ANTIALIAS)<br>    img = np.array(img).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>    img = img.transpose((<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>    img = img/<span class="hljs-number">255.0</span><br>    print(img.shape)<br>    <span class="hljs-keyword">return</span> img<br><br><span class="hljs-comment">#构建预测动态图过程</span><br><span class="hljs-keyword">with</span> fluid.dygraph.guard():<br>    infer_path = <span class="hljs-string">&#x27;./data/data23668/Dataset/6/IMG_4376.JPG&#x27;</span><br>    model=MyDNN()<span class="hljs-comment">#模型实例化</span><br>    model_dict,_=fluid.load_dygraph(<span class="hljs-string">&#x27;MyDNN&#x27;</span>)<br>    model.load_dict(model_dict)<span class="hljs-comment">#加载模型参数</span><br>    model.<span class="hljs-built_in">eval</span>()<span class="hljs-comment">#评估模式</span><br>    infer_img = load_image(infer_path)<br>    infer_img=np.array(infer_img).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>    infer_img=infer_img[np.newaxis,:, : ,:]<br>    infer_img = fluid.dygraph.to_variable(infer_img)<br>    result=model(infer_img)<br>    display(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./data/data23668/Dataset/6/IMG_4376.JPG&#x27;</span>))<br>    print(np.argmax(result.numpy()))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习, 图像处理, CV, paddle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask 静态文件及渲染模板</title>
    <link href="/2021/01/20/flask-3/"/>
    <url>/2021/01/20/flask-3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask-静态文件及渲染模板"><a href="#Flask-静态文件及渲染模板" class="headerlink" title="Flask 静态文件及渲染模板"></a>Flask 静态文件及渲染模板</h1><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>动态的 web 应用同样需要静态文件。<code>CSS</code> 和 <code>JavaScript</code> 文件通常来源于此。理想情况下，你的 web 服务器已经配置好为它们服务，然而在开发过程中 Flask 就能够做到。只要在你的包中或模块旁边创建一个名为 <code>static</code> 的文件夹，在应用中使用 <code>/static</code> 即可访问。</p><p>给静态文件生成 URL ，使用特殊的 <code>static</code> 端点名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">url_for(<span class="hljs-string">&#x27;static&#x27;</span>, filename=<span class="hljs-string">&#x27;style.css&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这个文件是应该存储在文件系统上的 <code>static/style.css</code> 。</p><h2 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h2><p>可以使用方法 <code>render_template()</code> 来渲染模板。所有你需要做的就是提供模板的名称以及你想要作为关键字参数传入模板的变量。</p><p>渲染模板的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&#x27;</span></span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):</span>   <span class="hljs-comment"># 默认 name 为 None</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;hello.html&#x27;</span>, name=name)   <span class="hljs-comment"># 将 name 参数传递到模板变量中</span><br></code></pre></td></tr></table></figure><p>Flask 将会在 <code>templates</code> 文件夹中寻找模板。</p><p>对于模板，你可以使用 Jinja2 模板的全部能力。详细信息查看官方的 <a href="http://jinja.pocoo.org/docs/2.10/templates/">Jinja2 Template Documentation</a> 。</p><p>自动转义默认是开启的，因此如 <code>name</code> 包含 HTML，它将会自动转义。如果你信任一个变量，并且你知道它是安全的（例如一个模块把 wiki 标记转换到 HTML ），你可以用 <code>Markup</code> 类或 <code>|safe</code> 过滤器在模板中标记它是安全的。 在 Jinja 2 文档中，你会见到更多例子。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>静态文件放在 <code>static</code> 目录中，模板文件放在 <code>templates</code> 目录下。</p>]]></content>
    
    
    <categories>
      
      <category>Flask 入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flask, Web入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask 路由</title>
    <link href="/2021/01/20/flask-2/"/>
    <url>/2021/01/20/flask-2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask-路由"><a href="#Flask-路由" class="headerlink" title="Flask 路由"></a>Flask 路由</h1><h2 id="路由介绍"><a href="#路由介绍" class="headerlink" title="路由介绍"></a>路由介绍</h2><p><code>route</code> 装饰器是用于把一个函数绑定到一个 URL 上</p><p>例如上次的 <code>hello.py</code>文件可以修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><span class="hljs-comment"># 如果访问根目录 &#x27;/&#x27; ，返回 Index Page</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Index Page&#x27;</span><br><br><span class="hljs-comment"># 如果访问 &#x27;/hello&#x27; ，返回 Hello, World!</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, World!&#x27;</span><br></code></pre></td></tr></table></figure><p>这样就实现了通过访问不同的 URL 地址从而响应不同的页面。不仅如此！你可以动态地构造 URL 的特定部分，也可以在一个函数上绑定多个不同的规则。</p><h2 id="变量规则"><a href="#变量规则" class="headerlink" title="变量规则"></a>变量规则</h2><p>为了给 URL 增加变量的部分，你需要把一些特定的字段标记成 <code>&lt;variable_name&gt;</code>。这些特定的字段将作为参数传入到你的函数中。当然也可以指定一个可选的转换器通过规则 <code>&lt;converter:variable_name&gt;</code>将变量值转换为特定的数据类型。</p><p>在<code>hello.py</code>中添加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_user_profile</span>(<span class="hljs-params">username</span>):</span><br>    <span class="hljs-comment"># 显示用户名</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;User &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(username)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_post</span>(<span class="hljs-params">post_id</span>):</span><br>    <span class="hljs-comment"># 显示提交整型的用户&quot;id&quot;的结果，注意&quot;int&quot;是将输入的字符串形式转换为整型数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Post &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(post_id)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/path/&lt;path:subpath&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_subpath</span>(<span class="hljs-params">subpath</span>):</span><br>    <span class="hljs-comment"># 显示 /path/ 之后的路径名</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Subpath &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(subpath)<br></code></pre></td></tr></table></figure><p>转换器的主要类型如下：</p><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>string</td><td>默认的数据类型，接受没有任何斜杠 “/” 的字符串</td></tr><tr><td>int</td><td>接受整型</td></tr><tr><td>float</td><td>接受浮点类型</td></tr><tr><td>path</td><td>和 string 类似，但是接受斜杠 “/”</td></tr><tr><td>uuid</td><td>只接受 uuid 字符串</td></tr></tbody></table><h3 id="唯一-URLs-重定向行为"><a href="#唯一-URLs-重定向行为" class="headerlink" title="唯一 URLs / 重定向行为"></a>唯一 URLs / 重定向行为</h3><p>添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/projects/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">projects</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;The project page&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/about&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">about</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;The about page&#x27;</span><br></code></pre></td></tr></table></figure><p>第一种情况中：尾端有一个斜杠，当用户输入网址时忘了添加尾部的斜杠，系统回自动重定向到带了尾部斜杠的地址</p><p>第二种情况中：尾端不带斜杠，当用户输入网址时多添加了尾部的斜杠，系统回报错<code>Not Found</code></p><p>所以，在代码的 URL 设置时斜线只可多写不可少写，另外，URL设置不在尾端加斜杠 <code>/</code> 会使URL保持唯一，有助于避免搜索引擎索引同一个页面两次。</p><h3 id="构建URL"><a href="#构建URL" class="headerlink" title="构建URL"></a>构建URL</h3><p>去构建一个 URL 来匹配一个特定的函数可以使用 <code>url_for()</code> 方法。它接受函数名作为第一个参数，以及一些关键字参数，每一个关键字参数对应于 URL 规则的变量部分。未知变量部分被插入到 URL 中作为查询参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, url_for<br></code></pre></td></tr></table></figure><h2 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h2><p>HTTP (也就是 Web 应用协议) 有不同的方法来访问 URLs 。默认情况下，路由只会响应 GET 请求，但是能够通过给 <code>route()</code> 装饰器提供 <code>methods</code> 参数来改变。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        do_the_login()   <span class="hljs-comment"># 如果是 POST 方法就执行登录操作</span><br>    <span class="hljs-keyword">else</span>:<br>        show_the_login_form()   <span class="hljs-comment"># 如果是 GET 方法就展示登录表单</span><br></code></pre></td></tr></table></figure><p>也许你并不清楚 HTTP 方法是什么？别担心，这里有一个 HTTP 方法的快速入门以及为什么它们重要：</p><p><code>HTTP</code> 方法（通常也称为 “谓词”）告诉服务器客户端想要对请求的页面做什么。</p><p>下面这些方法是比较常见的：</p><ul><li>GET：浏览器通知服务器只获取页面上的信息并且发送回来。这可能是最常用的方法。</li><li>HEAD：浏览器告诉服务器获取信息，但是只对头信息感兴趣，不需要整个页面的内容。应用应该处理起来像接收到一个 GET 请求但是不传递实际内容。在 Flask 中你完全不需要处理它，底层的 Werkzeug 库会为你处理的。</li><li>POST：浏览器通知服务器它要在 URL 上提交一些信息，服务器必须保证数据被存储且只存储一次。这是 HTML 表单通常发送数据到服务器的方法。</li><li>PUT：同 POST 类似，但是服务器可能触发了多次存储过程，多次覆盖掉旧值。现在你就会问这有什么用，有许多理由需要如此去做。考虑下在传输过程中连接丢失：在这种情况下浏览器和服务器之间的系统可能安全地第二次接收请求，而不破坏其它东西。该过程操作 POST 方法是不可能实现的，因为它只会被触发一次。</li><li>DELETE：移除给定位置的信息。</li><li>OPTIONS：给客户端提供一个快速的途径来指出这个 URL 支持哪些 HTTP 方法。从 Flask 0.6 开始，自动实现了该功能。</li></ul><p>现在在 HTML4 和 XHTML1 中，表单只能以 GET 和 POST 方法来提交到服务器。在 JavaScript 和以后的 HTML 标准中也能使用其它的方法。同时，HTTP 最近变得十分流行，浏览器不再是唯一使用 HTTP 的客户端。比如许多版本控制系统使用 HTTP。</p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>练习题1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 请开发一个小应用</span><br><span class="hljs-comment"># URL 地址输入 http://127.0.0.1:5000/xxx（其中 xxx 表示你的名字）</span><br><span class="hljs-comment"># 访问页面会显示 xxx。</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&lt;username&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span>(<span class="hljs-params">username</span>):</span><br>    <span class="hljs-keyword">return</span> username<br></code></pre></td></tr></table></figure><p>练习题2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 请完成一个应用</span><br><span class="hljs-comment"># 当 URL 是 http://127.0.0.1:5000/sum/a/b 时</span><br><span class="hljs-comment"># 其中 a 和 b 都是数字，服务器返回它们的和。</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/sum/&lt;int:a&gt;/&lt;int:b&gt;&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_sum</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#123;0&#125; + &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a,b,a+b)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Flask 入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flask, Web开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask介绍及安装</title>
    <link href="/2021/01/20/flask-1/"/>
    <url>/2021/01/20/flask-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flask介绍及安装"><a href="#Flask介绍及安装" class="headerlink" title="Flask介绍及安装"></a>Flask介绍及安装</h1><h2 id="Flask-简介"><a href="#Flask-简介" class="headerlink" title="Flask 简介"></a>Flask 简介</h2><p>Flask 是一个轻量级的 Web 应用框架，使用 Python 编写。基于 <a href="http://werkzeug.pocoo.org/">WerkzeugWSGI</a> 工具箱和 <a href="http://jinja.pocoo.org/">Jinja2</a> 模板引擎。使用 BSD 授权。Flask 也被称为 microframework ，因为它使用简单的核心，用 extension 增加其它功能。Flask 没有默认使用的数据库、窗体验证工具。然而，Flask 保留了扩增的弹性，可以用 Flask-extension 加入这些功能：ORM、窗体验证工具、文件上传、各种开放式身份验证技术。</p><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>virtualenv 能够允许多个不同版本的 Python 安装，每一个服务于各自的项目。它实际上并没有安装独立的 Python 副本，只是提供了一种方式使得环境保持独立。</p><h3 id="安装-virtualenv"><a href="#安装-virtualenv" class="headerlink" title="安装 virtualenv"></a>安装 virtualenv</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 使用如下命令即可很容易地安装 virtualenv 库：<br>$ sudo pip3 install virtualenv<br><br># 我们可以执行如下命令升级 pip 和 virtualenv 到最新版：<br>$ sudo pip3 install -U pip virtualenv<br><br># 执行如下命令可以查看 virtualenv 的版本：<br>$ pip3 <span class="hljs-keyword">freeze</span> | grep virtualenv<br><br></code></pre></td></tr></table></figure><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 执行命令创建虚拟环境</span><br>$ virtualenv -p python3 venv<br><br><span class="hljs-meta"># virtualenv 的命令中，-p 选项后面是选择解释器的版本为 python3 </span><br><span class="hljs-meta"># 最后的参数 venv 是虚拟环境的名字，执行此命令会创建一个虚拟环境的目录，目录名就是 venv 。</span><br></code></pre></td></tr></table></figure><h3 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ source ~<span class="hljs-regexp">/XXX/</span>venv<span class="hljs-regexp">/bin/</span>activate<br><span class="hljs-comment"># 其中XXX为工作目录，venv为环境目录名</span><br></code></pre></td></tr></table></figure><h2 id="安装-Flask"><a href="#安装-Flask" class="headerlink" title="安装 Flask"></a>安装 Flask</h2><p>在虚拟环境中安装 Flask 框架的 1.0.2 版本，执行如下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ pip install <span class="hljs-attribute">flask</span>==1.0.2<br><br><span class="hljs-comment"># 其中双等号后面即为版本号，如果不写版本号，则默认安装适用于 Python3.5 的最新版本。</span><br></code></pre></td></tr></table></figure><h2 id="第一个最小的-Web-应用"><a href="#第一个最小的-Web-应用" class="headerlink" title="第一个最小的 Web 应用"></a>第一个最小的 Web 应用</h2><p>在VS Code 中新建hello.py，写入代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello_world</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, World!&#x27;</span><br></code></pre></td></tr></table></figure><p>执行应用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 第一种方法</span><br><span class="hljs-builtin-name">export</span> FLASK_APP = hello.py<br>flask run<br><br><span class="hljs-comment"># 第二种方法</span><br><span class="hljs-builtin-name">export</span> FLASK_APP = hello.py<br>python3 -m flask run<br><br></code></pre></td></tr></table></figure><p>调试模式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 为了让所有的开发者特征可用（包括调试模式），</span><br><span class="hljs-comment"># 在运行服务器之前可以设置 FLASK_ENV 环境变量为 development：</span><br><br><span class="hljs-builtin-name">export</span> FLASK_ENV = development<br><span class="hljs-builtin-name">export</span> FLASK_DEBUG = 1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Flask 入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flask, Web入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux用户及文件权限管理</title>
    <link href="/2021/01/18/linux-2/"/>
    <url>/2021/01/18/linux-2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="用户及文件权限管理"><a href="#用户及文件权限管理" class="headerlink" title="用户及文件权限管理"></a>用户及文件权限管理</h1><p>Linux 的<strong>用户管理</strong>和<strong>权限机制</strong>，不同用户不可以轻易地查看、修改彼此的文件</p><h1 id="一、Linux-用户管理"><a href="#一、Linux-用户管理" class="headerlink" title="一、Linux 用户管理"></a>一、Linux 用户管理</h1><h2 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h2><p>打开终端，输入命令</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vala">who am i<br><span class="hljs-meta"># 或者</span><br>who mom likes <br><br><span class="hljs-meta"># 注意：要查看当前登录用户的用户名，去掉空格直接使用 whoami 即可</span><br>whoami<br></code></pre></td></tr></table></figure><p><code>who</code>命令的其他常用参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-a</code></td><td>打印能打印的全部</td></tr><tr><td><code>-d</code></td><td>打印死掉的进程</td></tr><tr><td><code>-m</code></td><td>同 <code>am i</code>，<code>mom likes</code></td></tr><tr><td><code>-q</code></td><td>打印当前登录用户数及用户名</td></tr><tr><td><code>-u</code></td><td>打印当前登录用户登录信息</td></tr><tr><td><code>-r</code></td><td>打印运行等级</td></tr></tbody></table><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>在 Linux 系统里， <code>root</code> 账户拥有整个系统至高无上的权限，比如新建和添加用户。</p><p>一般我们登录系统时都是以普通账户的身份登录的，要创建用户需要 root 权限，这里就要用到 <code>sudo</code> 这个命令了。不过使用这个命令有两个大前提，一是你要知道当前登录用户的密码，二是当前用户必须在 <code>sudo</code> 用户组。</p><h3 id="su，su-与-sudo"><a href="#su，su-与-sudo" class="headerlink" title="su，su- 与 sudo"></a>su，su- 与 sudo</h3><p><strong>需要注意Linux环境下输入密码时不会显示的</strong></p><p><code>su </code> 可以切换到用户 user，执行时需要输入目标用户的密码，<code>sudo </code> 可以以特权级别运行 cmd 命令，需要当前用户属于 sudo 组，且需要输入当前用户的密码。<code>su - </code> 命令也是切换用户，但是同时用户的环境变量和工作目录也会跟着改变成目标用户所对应的。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 我们创建一个叫`boy`的用户</span><br>sudo <span class="hljs-keyword">adduser </span><span class="hljs-keyword">boy</span><br><span class="hljs-keyword"># </span>修改用户密码的命令<br>sudo passwd <span class="hljs-keyword">boy</span><br><span class="hljs-keyword"># </span>切换登录用户<br>su -l <span class="hljs-keyword">boy</span><br></code></pre></td></tr></table></figure><h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><p>在 Linux 里面每个用户都有一个归属（用户组），用户组简单地理解就是一组用户的集合，它们共享一些资源和权限，同时拥有私有资源。</p><h3 id="查看属于的用户组"><a href="#查看属于的用户组" class="headerlink" title="查看属于的用户组"></a>查看属于的用户组</h3><h4 id="方法一：使用-groups-命令"><a href="#方法一：使用-groups-命令" class="headerlink" title="方法一：使用 groups 命令"></a>方法一：使用 groups 命令</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 查看boy所属的用户组</span><br><span class="hljs-attribute">groups</span> boy<br></code></pre></td></tr></table></figure><h4 id="方法二：查看-etc-group-文件"><a href="#方法二：查看-etc-group-文件" class="headerlink" title="方法二：查看 /etc/group 文件"></a>方法二：查看 /etc/group 文件</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">cat /etc/<span class="hljs-keyword">group</span> <span class="hljs-title">| sort</span><br></code></pre></td></tr></table></figure><p>这里的<code>cat</code>命令用于读取指定文件的内容并打印到终端输出， <code>| sort</code> 表示将读取的文本进行一个字典排序再输出</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 使用 grep 命令过滤不想看到的内容（类似于关键词查找）</span><br>cat /etc/<span class="hljs-keyword">group</span> <span class="hljs-title">| grep</span> -E <span class="hljs-string">&quot;boy&quot;</span><br></code></pre></td></tr></table></figure><h3 id="将其他用户加入-sudo-用户组"><a href="#将其他用户加入-sudo-用户组" class="headerlink" title="将其他用户加入 sudo 用户组"></a>将其他用户加入 sudo 用户组</h3><p>默认情况下新创建的用户是不具有 root 权限的，也不在 sudo 用户组，可以让其加入 sudo 用户组从而获取 root 权限：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">su</span> -<span class="hljs-keyword">l</span> boy<br>sudo <span class="hljs-keyword">ls</span><br></code></pre></td></tr></table></figure><p>可能会提示 boy 不在 sudoers 文件中，意思就是 boy 不在 sudo 用户组中</p><p>使用 <code>usermod</code> 命令可以为用户添加用户组，同样使用该命令你必需有 root 权限，你可以直接使用 root 用户为其它用户添加用户组，或者用其它已经在 sudo 用户组的用户使用 sudo 命令获取权限来执行该命令。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 切换回主用户pgj</span><br>su - pgj<br><br><span class="hljs-meta"># 开始设置 boy 用户为sudo用户组中</span><br>groups boy<br>sudo usermod -G sudo boy<br>groups boy<br><br><span class="hljs-meta"># 使用 sudo 获取 root 权限</span><br>su - boy<br>sudo ls /<br></code></pre></td></tr></table></figure><h3 id="删除用户和用户组"><a href="#删除用户和用户组" class="headerlink" title="删除用户和用户组"></a>删除用户和用户组</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 删除用户so easy</span><br>sudo deluser boy --remove-home<br><span class="hljs-meta"># 使用 --remove-home 参数在删除用户时候会一并将该用户的工作目录一并删除。如果不使用那么系统会自动在 /home 目录为该用户保留工作目录。</span><br><br><br><span class="hljs-meta"># 删除用户组可以使用 groupdel 命令，倘若该群组中仍包括某些用户，则必须先删除这些用户后，才能删除群组。</span><br></code></pre></td></tr></table></figure><h1 id="二、Linux-文件权限"><a href="#二、Linux-文件权限" class="headerlink" title="二、Linux 文件权限"></a>二、Linux 文件权限</h1><p>文件权限就是文件的访问控制权限，即哪些用户和组群可以访问文件以及可以执行什么样的操作。</p><h2 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 使用 ls 命令查看文件权限，使用较长格式列出文件</span><br><span class="hljs-keyword">ls</span> -l<br></code></pre></td></tr></table></figure><p><code>ls</code>命令的其他常用的用法：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 显示除了 .（当前目录）和 ..（上一级目录）之外的所有文件，包括隐藏文件（Linux 下以 . 开头的文件为隐藏文件）。</span><br>ls -a<br><br><span class="hljs-meta"># 查看一个目录的完整属性，而不是显示目录里面的文件属性</span><br>ls -dl &lt;目录名&gt;<br><br><span class="hljs-meta"># 显示所有文件大小，并以普通人类能看懂的方式呈现</span><br>ls -asSh<br><span class="hljs-meta"># 其中小s为显示文件大小，大S为按文件大小排序，具体可以使用 `man ls`命令查询 </span><br></code></pre></td></tr></table></figure><h2 id="变更文件所有者"><a href="#变更文件所有者" class="headerlink" title="变更文件所有者"></a>变更文件所有者</h2><p>切换到 boy 用户，在/home/boy目录新建一个文件，命名为lover</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">su</span> - boy<br><span class="hljs-keyword">pwd</span><br>touch lover<br><span class="hljs-keyword">ls</span> -alh lover<br></code></pre></td></tr></table></figure><p>切换回到 pgj(主用户) 用户，使用以下命令变更文件所有者为 pgj。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 切换回 pgj 用户再执行一下操作</span><br><span class="hljs-keyword">cd</span> <span class="hljs-string">/home/boy</span><br><span class="hljs-keyword">ls</span> lover<br><span class="hljs-comment"># 最关键的一步：</span><br>sudo chown pgj lover<br></code></pre></td></tr></table></figure><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>文件的权限有两种表示方式：</p><h3 id="数字表示"><a href="#数字表示" class="headerlink" title="数字表示"></a>数字表示</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 修改lover文件的权限</span><br>chmod <span class="hljs-number">600</span> lover<br><span class="hljs-meta"># 其中600是某种权限对应的数字</span><br>ls -alh lover<br></code></pre></td></tr></table></figure><h3 id="加减赋值操作"><a href="#加减赋值操作" class="headerlink" title="加减赋值操作"></a>加减赋值操作</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># 也可以使用一下命令修改权限</span><br><span class="hljs-keyword">chmod</span> go-rw lover<br></code></pre></td></tr></table></figure><p><code>g</code>、<code>o</code> 还有 <code>u</code> 分别表示 group（用户组）、others（其他用户） 和 user（用户），<code>+</code> 和 <code>-</code> 分别表示增加和去掉相应的权限。</p>]]></content>
    
    
    <categories>
      
      <category>Linux入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基本操作体验</title>
    <link href="/2021/01/18/linux-1/"/>
    <url>/2021/01/18/linux-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux基本操作体验"><a href="#Linux基本操作体验" class="headerlink" title="Linux基本操作体验"></a>Linux基本操作体验</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#创建一个名为`file`的文件，touch 是一个命令</span><br>touch file<br><br><span class="hljs-comment">#进入一个目录，cd是一个命令</span><br><span class="hljs-keyword">cd</span> <span class="hljs-string">/etc/</span><br><br><span class="hljs-comment">#查看当前所在目录</span><br><span class="hljs-keyword">pwd</span><br></code></pre></td></tr></table></figure><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>​    在<code>Xfce终端</code>中，可以使用<code>Tab</code>键来进行命令补全，<code>Ctrl + C</code> 可以强行终止当前程序</p><h2 id="其他一些快捷键"><a href="#其他一些快捷键" class="headerlink" title="其他一些快捷键"></a>其他一些快捷键</h2><table><thead><tr><th align="left">按键</th><th>作用</th></tr></thead><tbody><tr><td align="left"><code>Ctrl + d</code></td><td>键盘输入结束或退出终端</td></tr><tr><td align="left"><code>Ctrl + s</code></td><td>暂停当前程序，暂停后按下任意键恢复运行</td></tr><tr><td align="left"><code>Ctrl + z</code></td><td>将当前程序放到后台运行，恢复到前台为命令<code>fg</code></td></tr><tr><td align="left"><code>Ctrl + a</code></td><td>将光标移至输入行头，相当于<code>Home</code>键</td></tr><tr><td align="left"><code>Ctrl + e</code></td><td>将光标移至输入行末，相当于<code>End</code>键</td></tr><tr><td align="left"><code>Ctrl + k</code></td><td>删除从光标所在位置到行末</td></tr><tr><td align="left"><code>Alt + Backspace</code></td><td>向前删除一个单词</td></tr><tr><td align="left"><code>Shift + PgUp</code></td><td>将终端显示向上滚动</td></tr><tr><td align="left"><code>Shift + PgDn</code></td><td>将终端显示向下滚动</td></tr></tbody></table><h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><p>Shell 常用的通配符</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td><code>*</code></td><td>匹配 0 或多个字符</td></tr><tr><td><code>?</code></td><td>匹配任意一个字符</td></tr><tr><td><code>[list]</code></td><td>匹配 list 中的任意单一字符</td></tr><tr><td><code>[^list]</code></td><td>匹配 除 list 中的任意单一字符以外的字符</td></tr><tr><td><code>[c1-c2]</code></td><td>匹配 c1-c2 中的任意单一字符 如：<code>[0-9]</code> <code>[a-z]</code></td></tr><tr><td><code>&#123;string1,string2,...&#125;</code></td><td>匹配 string1 或 string2 (或更多) 其一字符串</td></tr><tr><td><code>&#123;c1..c2&#125;</code></td><td>匹配 c1-c2 中全部字符 如 {1..10}</td></tr></tbody></table><h1 id="学会在命令行中获取帮助"><a href="#学会在命令行中获取帮助" class="headerlink" title="学会在命令行中获取帮助"></a>学会在命令行中获取帮助</h1><h2 id="使用-man-命令"><a href="#使用-man-命令" class="headerlink" title="使用 man 命令"></a>使用 man 命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#可以使用如下方式获得某个命令的说明和使用的详细介绍</span><br><span class="hljs-built_in">man</span> &lt;command_name&gt;<br><span class="hljs-comment">#查看man命令本身的使用方式</span><br><span class="hljs-built_in">man</span> <span class="hljs-built_in">man</span><br></code></pre></td></tr></table></figure><h2 id="使用help参数"><a href="#使用help参数" class="headerlink" title="使用help参数"></a>使用help参数</h2><p>如果你知道某个命令的作用，只是想快速查看一些它的某个具体参数的作用，那么你可以使用 <code>--help</code> 参数，大部分命令都会带有这个参数，如：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">ls</span> <span class="hljs-params">--help</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown简单使用教程</title>
    <link href="/2021/01/17/Markdown/"/>
    <url>/2021/01/17/Markdown/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown简单使用教程"><a href="#Markdown简单使用教程" class="headerlink" title="Markdown简单使用教程"></a>Markdown简单使用教程</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>标题有两种格式，这里是使用<code>#</code>格式。使用<code>#</code>号可以表示1-6级标题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></table></figure><h2 id="二、段落格式"><a href="#二、段落格式" class="headerlink" title="二、段落格式"></a>二、段落格式</h2><ol><li><p>段落换行</p><p>Markdown段落换行是使用两个以上空格加上回车<br>当然也可以直接在段落后面使用一个空格来表示新开段落</p></li></ol><ol start="2"><li><p>字体</p><p>Markdown可以使用一下几种字体<br><code>*斜体文字*</code>或者<code>—斜体文字—</code><br><code> **粗体文字**</code>或者<code>——粗体文字——</code><br><code>***粗斜体文字***</code>或者<code>———粗斜体文字———</code></p></li></ol><ol start="3"><li><p>分割线</p><p>你可以在一行中用三个以上的星号(<code>+</code>)、减号(<code>-</code>)、底线(<code>-</code>)来建立一个分割线，行内不能有其他东西。<br>也可以在星号或是减号中间插入空格。<br>下面每种写法都可以创建分割线：</p></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-strong"><span class="hljs-emphasis"></span></span><br><span class="hljs-strong"><span class="hljs-emphasis">*</span> <span class="hljs-emphasis">* *</span></span><br><span class="hljs-strong"></span><br><span class="hljs-strong">**</span><span class="hljs-strong">****</span><br><br><span class="hljs-bullet">-</span> - -<br><br>-------------<br></code></pre></td></tr></table></figure><ol start="4"><li><p>删除线</p><p>如果要在段落的文字上添加删除线，只需要在文字的两端加上两个波浪线 <code>~~</code>即可</p></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#例如</span><br><br>~~Hello,girls~~<br></code></pre></td></tr></table></figure><ol start="5"><li><p>下划线</p><p>下划线课通过HTML的 <code>&lt;u&gt;</code>标签来实现：</p></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>带下划线文本<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="6"><li><p>脚注</p><p>Markdown脚注的格式如下：<br><code> [^要注明的文本]</code>例如</p></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[^PGJ] ： A handsome boy！<br></code></pre></td></tr></table></figure><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><p>Markdown支持有序列表和无序列表</p><ol><li>无序列表使用星号（<code>*</code>）、加号（<code>+</code>）、减号（<code>-</code>）作为列表标记，这些标记后面要加一个空格再填写内容</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br><br><span class="hljs-bullet">+</span> 第一项<br><span class="hljs-bullet">+</span> 第二项<br><span class="hljs-bullet">+</span> 第三项<br><br><span class="hljs-bullet">-</span> 第一项<br><span class="hljs-bullet">-</span> 第二项<br><span class="hljs-bullet">-</span> 第三项<br></code></pre></td></tr></table></figure><ol start="2"><li>有序列表使用数字再加上点号（<code>.</code>）来表示，记得加上空格再填写内容</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure><ol start="3"><li>列表嵌套</li></ol><p>列表嵌套只需要再子列表的选项前面添加四个空格即可。</p><h2 id="四、区块"><a href="#四、区块" class="headerlink" title="四、区块"></a>四、区块</h2><p>区块就是显示区域左边会有一条线<br>Markdown 区块引用是在段落开头使用<code>&gt;</code>符号，然后后面紧跟一个空格符号：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 区块引用</span><br><span class="hljs-quote">&gt; Hello</span><br><span class="hljs-quote">&gt; World!</span><br></code></pre></td></tr></table></figure><p>另外区块是可以嵌套的，一个<code>&gt;</code>符号是最外层，两个<code>&gt;</code>符号是第一层嵌套，以此类推</p><h2 id="五、代码"><a href="#五、代码" class="headerlink" title="五、代码"></a>五、代码</h2><ol><li>如果是段落上的一个函数或片段的代码可以用反引号（<code>）,这个反引号就是键盘</code>Esc`键下面的那个键</li></ol><ol start="2"><li>代码区块</li></ol><p>代码区块使用4个空格或者一个制表符（<code>Tab</code>键）</p><p>也可以用三个反引号（```）包裹一段代码，并指定一种语言（也可以不指定）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">​<span class="hljs-code">```javascript</span><br><span class="hljs-code">$(document).ready(function () &#123;</span><br><span class="hljs-code">    alert(&#x27;RUNOOB&#x27;);</span><br><span class="hljs-code">&#125;);</span><br></code></pre></td></tr></table></figure><h2 id="六、链接"><a href="#六、链接" class="headerlink" title="六、链接"></a>六、链接</h2><p>链接使用方法如下：</p><p><code>[连接名称](链接地址)</code><br>或者<br><code>&lt;链接地址&gt;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个链接 [<span class="hljs-string">PGJ博客</span>](<span class="hljs-link">20to30.xyz</span>)<br><br> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">www.20to30.xyz</span>&gt;</span></span> <br></code></pre></td></tr></table></figure><h2 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h2><p>Markdown 图片语法格式如下：<br><code>![alt 属性文本](C:/Users/GJ/Documents/图片地址)</code><br><code>![alt 属性文本](C:/Users/GJ/Documents/图片地址 &quot;可选标题&quot;)</code></p><p>就是：开头一个感叹号<code>!</code>，接着一个方括号，里面放上图片的替代文字，<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的”titlt”属性的文字。</p><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行<br>语法格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|  表头   | 表头  |<br>|  ----  | ----  |<br>| 单元格  | 单元格 |<br>| 单元格  | 单元格 |<br></code></pre></td></tr></table></figure><p>对齐方式<br><code>-: </code>设置内容和标题栏居右对齐<br><code>:- </code>设置内容和标题栏居左对齐<br><code>:-: </code>设置内容和标题栏居中对齐</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 左对齐 | 右对齐 | 居中对齐 |<br>| :-----| ----: | :----: |<br>| 单元格 | 单元格 | 单元格 |<br>| 单元格 | 单元格 | 单元格 |<br></code></pre></td></tr></table></figure><h2 id="九、Markdown-高级技巧"><a href="#九、Markdown-高级技巧" class="headerlink" title="九、Markdown 高级技巧"></a>九、Markdown 高级技巧</h2><p>请查看教程 [<a href="https://www.runoob.com/markdown/md-advance.html">https://www.runoob.com/markdown/md-advance.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Markdown入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/13/hello-world/"/>
    <url>/2021/01/13/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
